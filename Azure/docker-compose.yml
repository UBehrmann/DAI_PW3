version: "3.9"

networks:
  web:

services:
  traefik:
    image: traefik:latest
    container_name: traefik
    command:
      # For testing
      - --log.level=DEBUG
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls=true
      - --entrypoints.websecure.http.tls.certresolver=letsencrypt
      # We ask Let's Encrypt to generate certificates for our root domain and wildcard subdomains
      #- --entrypoints.websecure.http.tls.domains[0].main=ub-dai.duckdns.org
      #- --entrypoints.websecure.http.tls.domains[0].sans=*.ub-dai.duckdns.org
      ## Certificates
      # Uncomment next line when testing
      #- --certificatesResolvers.letsencrypt.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.letsencrypt.acme.email=urs.behrmann@heig-vd.ch
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      # We switch to DNS-01 challenge to generate certificates
      #- --certificatesresolvers.letsencrypt.acme.dnschallenge=true
      #- --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=duckdns
      #- --certificatesresolvers.letsencrypt.acme.dnschallenge.delayBeforeCheck=120
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt
    #environment:
    #  - DUCKDNS_TOKEN=588d68c6-5190-4d24-83da-8e344b129791
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik-dashboard.rule=Host(`dashboard.ub-dai.duckdns.org`)
      - traefik.http.routers.traefik-dashboard.entrypoints=websecure
      - traefik.http.routers.traefik-dashboard.service=api@internal
    networks:
      - web
    restart: always


  postgres:
    image: ghcr.io/ubehrmann/db_crud_server:latest
    container_name: postgres-db
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydb
    networks:
      - web
    restart: always

  app:
    image: ghcr.io/ubehrmann/crud_server:latest
    container_name: crud-server
    depends_on:
      - postgres
    environment:
      DB_URL: jdbc:postgresql://postgres:5432/mydb
      DB_USER: user
      DB_PASSWORD: password
    labels:
      - "traefik.enable=true"
      # HTTP router (for testing)
      #- "traefik.http.routers.api.rule=PathPrefix(`/api`)"
      #- "traefik.http.routers.api.entrypoints=web"
      #- "traefik.http.services.api.loadbalancer.server.port=7000"
      #- "traefik.http.middlewares.strip-api.stripprefix.prefixes=/api"
      #- "traefik.http.routers.api.middlewares=strip-api"
      # HTTPS router (for production)
      - "traefik.http.routers.api-https.rule=Host(`ub-dai.duckdns.org`) && PathPrefix(`/api`)"
      - "traefik.http.routers.api-https.entrypoints=websecure"
    networks:
      - web
    restart: always
